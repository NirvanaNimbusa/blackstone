{
  "info": {
    "title": "Blackstone",
    "version": "0.7.0",
    "description": "The Blackstone codebase is a collection of smart contracts and RESTful APIs which together form the basis for the Agreements Network. This collection includes a full-feature business process execution engine, and high-level translator from BPMN standard to smart contract based process graphs. It also include an object management suite utilized by the Agreements Network."
  },
  "swagger": "2.0",
  "paths": {
    "/agreement-collections": {
      "get": {
        "tags": [
          "Agreements"
        ],
        "description": "Get an Active Agreement Collection.",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Active Agreement Collection name"
                },
                "author": {
                  "type": "string",
                  "description": "Address of the creator (user account or org), logged in user address will be used if none supplied"
                },
                "collectionType": {
                  "type": "number",
                  "description": "Type of collection"
                },
                "packageId": {
                  "type": "string",
                  "description": "The packageId of the archetype package from which the collection was created"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agreements"
        ],
        "description": "Add an agreement to a collection",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Add an agreement to a collection",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "agreement": {
                  "type": "string",
                  "description": "Address of the agreement to add"
                },
                "collectionId": {
                  "type": "string",
                  "description": "Id of the collection to add to"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Add an agreement to a collection",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/agreement-collections/{id}": {
      "get": {
        "tags": [
          "Agreements"
        ],
        "description": "Get information for a single Agreement Collection if the author is the authenticated user or the organization the user is a member of.",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "agreement id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Agreement Collection id"
                },
                "name": {
                  "type": "string",
                  "description": "Human readable name of the Agreement Collection"
                },
                "author": {
                  "type": "string",
                  "description": "Controller contract of the user or organization"
                },
                "collectionType": {
                  "type": "number",
                  "description": "Type of collection"
                },
                "packageId": {
                  "type": "string",
                  "description": "The packageId of the archetype package from which the collection was created"
                },
                "agreements": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "address": {
                        "type": "string"
                      },
                      "archetype": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Array of agreement objects included in the collection"
                }
              }
            }
          }
        }
      }
    },
    "/agreements": {
      "get": {
        "tags": [
          "Agreements"
        ],
        "description": "Active Agreement information of agreements that are public, or if the `forCurrentUser` query is set to `true`, a) are authored by the authenticated user, b) are authored by an organization to which the authenticated user belongs, c) include the authenticated user in its signatories, or d) include an organization to which the authenticated user belongs in its signatories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "forCurrentUser",
            "in": "query",
            "description": "Optional query string parameter to get all agreements pertaining to the currently logged in user",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Active Agreement's address"
                  },
                  "name": {
                    "type": "string",
                    "description": "Human readable name of the Active Agreement"
                  },
                  "archetype": {
                    "type": "string",
                    "description": "Address of the parent Archetype of the Active Agreement"
                  },
                  "creator": {
                    "type": "string"
                  },
                  "isPrivate": {
                    "type": "boolean",
                    "description": "Whether the encryption framework of the Active Agreement"
                  },
                  "legalState": {
                    "type": "boolean"
                  },
                  "attachmentsFileReference": {
                    "type": "string",
                    "description": "Hoard grant needed to access an existing event log if any"
                  },
                  "maxNumberOfAttachments": {
                    "type": "number"
                  },
                  "numberOfParties": {
                    "type": "number",
                    "description": "The number of parties agreeing to the Active Agreement"
                  },
                  "formationProcessInstance": {
                    "type": "string"
                  },
                  "executionProcessInstance": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Agreements"
        ],
        "description": "Create an Agreement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Create an Agreement",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Human readable name of the Active Agreement (limit: 32 ASCII characters)"
                },
                "archetype": {
                  "type": "string",
                  "description": "Address of the parent Archetype of the Active Agreement"
                },
                "isPrivate": {
                  "type": "boolean",
                  "description": "Whether the encryption framework of the Active Agreement\nis operational or not"
                },
                "password": {
                  "type": "string",
                  "description": "A secret string which is used to trigger the encryption\nsystem for the Active Agreements's documents"
                },
                "maxNumberOfAttachments": {
                  "type": "integer",
                  "description": "The maximum number of attachments to be logged on the Active Agreement"
                },
                "parties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The addresses of the parties to the Active Agreement"
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "type": {
                        "type": "integer"
                      }
                    }
                  },
                  "description": "The \"custom-field-name\" and values of the parameters.\nNote - If a parameter with type 8 (Signing Party) is given, the corresponding value will be added to the agreement's parties."
                },
                "governingAgreements": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "If parent archetype has any governing archetypes, agreements for each one must"
                },
                "collectionId": {
                  "type": "string",
                  "description": "Id of the collection that the agreement is intended to be part of if it already exist, and their addresses should be given here."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "address of the created Agreement"
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{address}": {
      "get": {
        "tags": [
          "Agreements"
        ],
        "description": "Active Agreement information for a single Agreement.\nNotes: - If the password provided is incorrect or a hoard reference which does not exist was passed to the posted Active Agreement this get will return a `401`. - If the agreement was not authored by the logged in user or one of their organizations, or if its signatories does not include the logged in user or one of their organizations, this will return a `404`.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "password",
            "description": "The password to trigger the decryption key for an\nopaque Agreement",
            "in": "query",
            "type": "string"
          },
          {
            "name": "address",
            "description": "agreement address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Active Agreement's address"
                },
                "name": {
                  "type": "string",
                  "description": "Human readable name of the Active Agreement"
                },
                "archetype": {
                  "type": "string",
                  "description": "Address of the parent Archetype of the Active Agreement"
                },
                "isPrivate": {
                  "type": "boolean",
                  "description": "Whether the encryption framework of the Active Agreement\nis operational or not"
                },
                "isParty": {
                  "type": "boolean"
                },
                "isCreator": {
                  "type": "boolean"
                },
                "isAssignedTask": {
                  "type": "boolean"
                },
                "maxNumberOfAttachments": {
                  "type": "number",
                  "description": "Max number of attachments that can be stored in the attachments"
                },
                "legalState": {
                  "type": "number",
                  "description": "Legal state of the agreement"
                },
                "formationProcessInstance": {
                  "type": "string",
                  "description": "Address of the agreement's formation process instance"
                },
                "executionProcessInstance": {
                  "type": "string",
                  "description": "Address of the agreement's execution process instance"
                },
                "formationProcessDefinition": {
                  "type": "string"
                },
                "executionProcessDefinition": {
                  "type": "string"
                },
                "collectionId": {
                  "type": "string",
                  "description": "Id of the collection the agreement belongs to"
                },
                "parties": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "signatureTimestamp": {
                        "type": "string"
                      },
                      "signedBy": {
                        "type": "string"
                      },
                      "partyDisplayName": {
                        "type": "string"
                      },
                      "signedByDisplayName": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "An array of objects with each party member's address, user id or organization name, signature timestamp, and address of the user that has signed for the party"
                },
                "documents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "grant": {
                        "type": "string"
                      }
                    }
                  }
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "type": {
                        "type": "integer"
                      }
                    }
                  },
                  "description": "An array of objects with each parameter's name, value, and data type"
                },
                "governingAgreements": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "isPrivate": {
                        "type": "boolean"
                      }
                    }
                  },
                  "description": "An array of the governing agreements with the `address`, `name`, and `isPrivate` value of each"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agreements"
        ],
        "description": "Cancels an agreement if the authenticated user is a member of the agreement parties, or a member of an organization that is an agreement party",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Agreement address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cancel an Agreement",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/agreements/{address}/attachments": {
      "put": {
        "tags": [
          "Agreements"
        ],
        "description": "an attachment to the specific agreement.\nWhen requested with `Content-Type: multipart/form-data`, the attached file will be uploaded to hoard.\nThe attachment's content will be set to the hoard grant for the file, and the name will be set to the file's name.\nWhen requested with  `Content-Type: application/json`, the name and content from the request will be used as the attachment.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Add an attachment to an Agreement",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Human readable name of the attachment"
                },
                "content": {
                  "type": "string",
                  "description": "Description of the attachment"
                }
              }
            }
          },
          {
            "name": "address",
            "description": "Agreement address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "attachmentsFileReference": {
                  "type": "string",
                  "description": "The hoard grant of the updated attachments"
                },
                "attachments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "submitter": {
                        "type": "string"
                      },
                      "timestamp": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "contentType": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The updated array of attachments"
                }
              }
            }
          }
        }
      }
    },
    "/archetypes": {
      "get": {
        "tags": [
          "Archetypes"
        ],
        "description": "archetype information. Within the Agreements Network, Archetypes are the fundamental, top level objects. They are holders for a set of information which allows users to creat Active Agreements within the Platform. The returned list will include archetypes that are: a. authored by the authenticated user, or b. public (ie. `isPrivate` property is `false`) and activated (ie. `active` property is true)",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Archetype's address"
                  },
                  "name": {
                    "type": "string",
                    "description": "Human readable name of the Archetype"
                  },
                  "author": {
                    "type": "string",
                    "description": "Controller contract of the user or organization\nthat created the Archetype"
                  },
                  "description": {
                    "type": "string",
                    "description": "description of the Archetype"
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Whether the Archetype can be used to create\nnew Active Agreements or not"
                  },
                  "isPrivate": {
                    "type": "boolean",
                    "description": "Whether the encryption framework of the Archetype\nis operational or not"
                  },
                  "numberOfParameters": {
                    "type": "number",
                    "description": "The number of custom parameters used by the Archetype"
                  },
                  "numberOfDocuments": {
                    "type": "number",
                    "description": "The number of documents registered against the Archetype"
                  },
                  "countries": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The jurisdictions in which the Archetype has been\nregistered to be active"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Archetypes"
        ],
        "description": "Create an Archetype",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Create an Archetype",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Human readable name of the Archetype (limit: 32 ASCII characters)"
                },
                "author": {
                  "type": "string",
                  "description": "Controller contract of the user or organization\nthat created the Archetype. Note that currently the author is forced to be the logged-in-user's address\nsince we do not yet have a review/approval process for changes made to an organization-authored archetype by a user who is part of that organization"
                },
                "description": {
                  "type": "string",
                  "description": "Short human readable description of the Archetype"
                },
                "price": {
                  "type": "integer",
                  "description": "Price of the archetype, in cents (Optional- this field can be edited later through a `PUT` request to '/archetypes/:address/price')"
                },
                "isPrivate": {
                  "type": "boolean",
                  "description": "**(Optional)** Whether the encryption framework of\nthe Archetype is operational or not"
                },
                "password": {
                  "type": "string",
                  "description": "A secret string which is used to trigger the encryption\nsystem for the Archetype's documents"
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "signatory": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "**(Optional)** The \"name\" (limit: 32 ASCII characters) and \"type\" of all custom parameters used\nby the Archetype"
                },
                "documents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "grant": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "**(Optional)**  The \"name\" and \"grant\" (if any)\nsufficient to provide the information regarding the relevant documents associated with\nthe Archetype"
                },
                "jurisdictions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string"
                      },
                      "regions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "description": "The \"country\" and \"regions\" which the Archetype\nhas been registered as relevant to. The \"country\" is registered as an ISO standard\ntwo character string and \"regions\" is an array of addresses relating to the controlling\ncontracts for the region (see [ISO standards manipulation](#) section)."
                },
                "formationProcessDefinition": {
                  "type": "string",
                  "description": "Address of the formation process definition\ncontroller"
                },
                "executionProcessDefinition": {
                  "type": "string",
                  "description": "Address of the execution process definition\ncontroller"
                },
                "governingArchetypes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of contract addresses of the archetypes to govern this new one\nof the rights and conditions of the contract"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "address of the created Archetype"
                }
              }
            }
          }
        }
      }
    },
    "/archetype-packages/{id}": {
      "get": {
        "tags": [
          "Archetypes"
        ],
        "description": "Gets information for a single archetype package. Returns a `404` if the package is private or not active and the authenticated user is not its author.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "archetype package id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Archetype Package id"
                },
                "name": {
                  "type": "string",
                  "description": "Human readable name of the Archetype Package"
                },
                "description": {
                  "type": "string",
                  "description": "Human readable description of the Archetype Package"
                },
                "author": {
                  "type": "string",
                  "description": "Controller contract of the user or organization"
                },
                "isPrivate": {
                  "type": "boolean",
                  "description": "Indicates whether the package can be read/used publicly"
                },
                "active": {
                  "type": "boolean",
                  "description": "Indicates whether the package has been activated and available for creating collections with."
                },
                "archetypes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "address": {
                        "type": "string"
                      },
                      "active": {
                        "type": "boolean"
                      }
                    }
                  },
                  "description": "Array of archetypes with name, address, and active keys\nthat are included in the Archetype Package"
                }
              }
            }
          }
        }
      }
    },
    "/archetypes/packages": {
      "post": {
        "tags": [
          "Archetypes"
        ],
        "description": "Create an Archetype Package",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Create an Archetype Package",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Human readable name of the Archetype Package"
                },
                "description": {
                  "type": "string",
                  "description": "Human readable description of the Archetype Package"
                },
                "String": {
                  "type": "string",
                  "description": "author Controller contract of the user or organization. Will be set to the authenticated user's address if not provided.\nthat created the Archetype Package"
                },
                "isPrivate": {
                  "type": "boolean",
                  "description": "Human readable description of the Archetype Package"
                },
                "active": {
                  "type": "boolean",
                  "description": "Optional- will default to false"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id of the created Archetype Package"
                }
              }
            }
          }
        }
      }
    },
    "/archetype-packages/{id}/archetype/{address}": {
      "put": {
        "tags": [
          "Archetypes"
        ],
        "description": "Add an archetype to a package",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Archetype address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Package Id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Add an archetype to a package",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/archetype-packages/{id}/activate": {
      "put": {
        "tags": [
          "Archetypes"
        ],
        "description": "Activate the archetype package.\nAn archetype package can only be activated by its author.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Archetype package id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Activate an archetype package",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/archetype-packages/{id}/deactivate": {
      "put": {
        "tags": [
          "Archetypes"
        ],
        "description": "Deactivate the archetype package. An archetype package can only be deactivated by its author. Once an archetype package is deactivated by its author, it will not be included  in `GET /archetype-packges` or `GET /archetype-packages/:id` responses  made by users other than the author.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Archetype package id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "deactivate an archetype package",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/archetypes/{address}": {
      "get": {
        "tags": [
          "Archetypes"
        ],
        "description": "Get archetype information for a single Archetype. This endpoint will return a `404` if: a. the archetype is not found, or b. the archetype is private and the authenticated user is not its author. Note: if the password provided is incorrect or a hoard reference which does not exist was passed to the posted archetype this get will return a `401`.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "password",
            "description": "The password to trigger the decryption key for an\nopaque Archetype",
            "in": "query",
            "type": "string"
          },
          {
            "name": "address",
            "description": "Archetype address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Archetype's address"
                },
                "name": {
                  "type": "string",
                  "description": "Human readable name of the Archetype"
                },
                "author": {
                  "type": "string",
                  "description": "Controller contract of the user or organization\nthat created the Archetype"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the archetype"
                },
                "price": {
                  "type": "number",
                  "description": "Price of the archetype"
                },
                "active": {
                  "type": "boolean",
                  "description": "Whether the Archetype can be used to create\nnew Active Agreements or not"
                },
                "isPrivate": {
                  "type": "boolean",
                  "description": "Whether the encryption framework of the Archetype\nis operational or not"
                },
                "successor": {
                  "type": "string",
                  "description": "Address of the successor archetype"
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "number"
                      },
                      "label": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The \"name\" and \"type\" of all custom parameters used\nby the Archetype"
                },
                "documents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "grant": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The \"name\", \"grant\" (if any)\nsufficient to provide the information regarding the relevant documents associated with\nthe Archetype"
                },
                "jurisdictions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string"
                      },
                      "regions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "description": "The \"country\" and \"regions\" which the Archetype\nhas been registered as relevant to. The \"country\" is registered as an ISO standard\ntwo character string and \"regions\" is an array of addresses relating to the controlling\ncontracts for the region (see [ISO standards manipulation](#) section)."
                },
                "packages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The \"id\" and \"name\" of each of the packages that the archetype has been added to"
                },
                "governingArchetypes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/archetypes/{address}/activate": {
      "put": {
        "tags": [
          "Archetypes"
        ],
        "description": "Set the archetype so that agreements can be created from it.  An archetype can only be activated by its author. This action will fail if the archetype has a successor set.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Archetype address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Activate an archetype",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/archetypes/{address}/successor/{successor}": {
      "put": {
        "tags": [
          "Archetypes"
        ],
        "description": "Sets the successor of given archetype. This action automatically makes the archetype inactive. Note that an archetype cannot point to itself as its successor. It also validates if this action will result in a circular dependency between two archetypes. A successor may only be set by the author of the archetype.",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Archetype address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "successor",
            "description": "Successor address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Set successor for an archetype",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/archetypes/{address}/price": {
      "put": {
        "tags": [
          "Archetypes"
        ],
        "description": "Sets the price of given archetype",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Set price of an archetype",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "price": {
                  "type": "number",
                  "description": "Price of the archetype"
                }
              }
            }
          },
          {
            "name": "address",
            "description": "Archetype address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Set price of an archetype",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/archetypes/{address}/deactivate": {
      "put": {
        "tags": [
          "Archetypes"
        ],
        "description": "Set the archetype so that agreements cannot be created from it. An archetype can only be deactivated by its author. Once an archetype is deactivated by its author, it will not be included in `GET /archetypes` responses made by users other than the author.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Archetype address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deactivate an archetype",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/bpm/process-models": {
      "get": {
        "tags": [
          "BPM Model"
        ],
        "description": "Read Process Models",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "modelAddress": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "versionMajor": {
                    "type": "number"
                  },
                  "versionMinor": {
                    "type": "number"
                  },
                  "versionPatch": {
                    "type": "number"
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "BPM Model"
        ],
        "description": "XML needs to be passed in the request body as plain text or application/xml",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "description": "Optional parameter to denote format of process model.\nDefaults to `bpmn` which is also the only format that is supported at this time.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "upFile",
            "description": "XML file",
            "in": "formData",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "details, process details, and parsed diagram",
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "description": "with details of the model and processes belonging to it",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "address": {
                      "type": "string"
                    }
                  }
                },
                "processes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "processDefinitionId": {
                        "type": "string"
                      },
                      "interfaceId": {
                        "type": "string"
                      },
                      "processName": {
                        "type": "string"
                      },
                      "modelAddress": {
                        "type": "string"
                      },
                      "private": {
                        "type": "boolean"
                      },
                      "author": {
                        "type": "string"
                      }
                    }
                  }
                },
                "parsedDiagram": {
                  "type": "object",
                  "properties": {
                    "model": {
                      "type": "object",
                      "properties": {
                        "dataStores": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "parameters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "parameterType": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "name": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "version": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "private": {
                          "type": "boolean"
                        },
                        "author": {
                          "type": "string"
                        }
                      }
                    },
                    "processes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "interface": {
                            "type": "string"
                          },
                          "participants": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "tasks": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "conditionalPerformer": {
                                  "type": "boolean"
                                },
                                "dataStorageId": {
                                  "type": "string"
                                },
                                "dataPath": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "tasks": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "userTasks": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "assignee": {
                                  "type": "string"
                                },
                                "activityType": {
                                  "type": "number"
                                },
                                "taskType": {
                                  "type": "number"
                                },
                                "behavior": {
                                  "type": "number"
                                },
                                "multiInstance": {
                                  "type": "boolean"
                                },
                                "application": {
                                  "type": "string"
                                },
                                "subProcessModelId": {
                                  "type": "string"
                                },
                                "subProcessDefinitionId": {
                                  "type": "string"
                                },
                                "dataMappings": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      },
                                      "direction": {
                                        "type": "number"
                                      },
                                      "dataPath": {
                                        "type": "string"
                                      },
                                      "dataStorageId": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "sendTasks": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "receiveTasks": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "serviceTasks": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "transitions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "source": {
                                  "type": "string"
                                },
                                "target": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "activityMap": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bpm/process-models/{address}/diagram": {
      "get": {
        "tags": [
          "BPM Model"
        ],
        "description": "the diagram of the specified process model in the requested MIME type.\nThe 'Accept' header in the request should be set to either 'application/xml' or 'application/json'.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The address of the process model",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "model": {
                  "type": "object",
                  "description": "with details of the model and processes belonging to it",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "version": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "private": {
                      "type": "boolean"
                    },
                    "dataStores": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "dataStorage": {
                            "type": "string"
                          },
                          "dataPath": {
                            "type": "string"
                          },
                          "parameterType": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "processes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "interface": {
                        "type": "string"
                      },
                      "participants": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tasks": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "conditionalPerformer": {
                              "type": "boolean"
                            },
                            "dataStorageId": {
                              "type": "string"
                            },
                            "dataPath": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "tasks": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "userTasks": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "assignee": {
                              "type": "string"
                            },
                            "activityType": {
                              "type": "number"
                            },
                            "taskType": {
                              "type": "number"
                            },
                            "behavior": {
                              "type": "number"
                            },
                            "multiInstance": {
                              "type": "boolean"
                            },
                            "application": {
                              "type": "string"
                            },
                            "subProcessModelId": {
                              "type": "string"
                            },
                            "subProcessDefinitionId": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "sendTasks": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "receiveTasks": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "serviceTasks": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "transitions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bpm/applications": {
      "get": {
        "tags": [
          "BPM Model"
        ],
        "description": "Read Applications",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "object",
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "applicationType": {
                    "type": "integer"
                  },
                  "location": {
                    "type": "string"
                  },
                  "webForm": {
                    "type": "string"
                  },
                  "accessPoints": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "accessPoints": {
                          "type": "string"
                        },
                        "direction": {
                          "type": "number"
                        },
                        "dataType": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bpm/process-definitions": {
      "get": {
        "tags": [
          "BPM Model"
        ],
        "description": "Read All Process Definitions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "interfaceId",
            "description": "Optional query parameter `interfaceId` can be used to filter by interface",
            "in": "query",
            "type": "string"
          },
          {
            "name": "processDefinitionId",
            "description": "Optional query parameter `processDefinitionId` can be used to filter by processDefinitionId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "modelId",
            "description": "Optional query parameter `modelId` can be used to filter by modelId",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "processDefinitionId": {
                        "type": "string"
                      },
                      "address": {
                        "type": "string"
                      },
                      "modelAddress": {
                        "type": "string"
                      },
                      "interfaceId": {
                        "type": "string"
                      },
                      "modelFileReference": {
                        "type": "string"
                      },
                      "isPrivate": {
                        "type": "boolean"
                      },
                      "author": {
                        "type": "string"
                      },
                      "modelId": {
                        "type": "string"
                      },
                      "processName": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Process Definition object"
                }
              }
            }
          }
        }
      }
    },
    "/bpm/process-definitions/{address}": {
      "get": {
        "tags": [
          "BPM Model"
        ],
        "description": "Read Single Process Definition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The address of the process definition",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "processDefinitionId": {
                  "type": "string",
                  "description": "Id of the process definition"
                },
                "address": {
                  "type": "string",
                  "description": "Address of the process definition"
                },
                "modelAddress": {
                  "type": "string",
                  "description": "Address of the model the process definition was created under"
                },
                "interfaceId": {
                  "type": "string",
                  "description": "'Agreement Formation' or 'Agreement Execution'"
                },
                "modelFileReference": {
                  "type": "string",
                  "description": "Hoard grant for the xml file representing the process"
                },
                "isPrivate": {
                  "type": "string",
                  "description": "Whether model is private"
                },
                "author": {
                  "type": "string",
                  "description": "Address of the model author"
                },
                "modelId": {
                  "type": "string",
                  "description": "Id of the process model"
                },
                "processName": {
                  "type": "string",
                  "description": "Human-readable name of the process definition"
                }
              }
            }
          }
        }
      }
    },
    "/activity-instances": {
      "get": {
        "tags": [
          "BPM Runtime"
        ],
        "description": "Get all activities of a process instance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "processInstance",
            "description": "Optional Address of process instance to filter by",
            "in": "query",
            "type": "string"
          },
          {
            "name": "agreementAddress",
            "description": "Optional Address of process instance to filter by",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "processAddress": {
                    "type": "string"
                  },
                  "activityInstanceId": {
                    "type": "string"
                  },
                  "activityId": {
                    "type": "string"
                  },
                  "created": {
                    "type": "string"
                  },
                  "completed": {
                    "type": "boolean"
                  },
                  "performer": {
                    "type": "string"
                  },
                  "completedBy": {
                    "type": "string"
                  },
                  "state": {
                    "type": "number"
                  },
                  "agreementAddress": {
                    "type": "string"
                  },
                  "agreementName": {
                    "type": "string"
                  },
                  "processDefinitionAddress": {
                    "type": "string"
                  },
                  "processName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activity-instances/{id}": {
      "get": {
        "tags": [
          "BPM Runtime"
        ],
        "description": "Get details of the specified activity instance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "activity instance ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Activity instance object",
            "schema": {
              "type": "object",
              "properties": {
                "state": {
                  "type": "number"
                },
                "processAddress": {
                  "type": "string"
                },
                "activityInstanceId": {
                  "type": "string"
                },
                "created": {
                  "type": "string"
                },
                "completed": {
                  "type": "number"
                },
                "taskType": {
                  "type": "number"
                },
                "application": {
                  "type": "string"
                },
                "applicationType": {
                  "type": "number"
                },
                "webForm": {
                  "type": "string"
                },
                "processName": {
                  "type": "string"
                },
                "processDefinitionAddress": {
                  "type": "string"
                },
                "agreementAddress": {
                  "type": "string"
                },
                "modelAuthor": {
                  "type": "string"
                },
                "private": {
                  "type": "number"
                },
                "agreementName": {
                  "type": "string"
                },
                "attachmentsFileReference": {
                  "type": "string"
                },
                "maxNumberOfAttachments": {
                  "type": "number"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dataMappingId": {
                        "type": "string"
                      },
                      "dataPath": {
                        "type": "string"
                      },
                      "dataStorageId": {
                        "type": "string"
                      },
                      "value": {
                        "type": "boolean"
                      },
                      "dataType": {
                        "type": "number"
                      },
                      "parameterType": {
                        "type": "number"
                      },
                      "direction": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activity-instances/{activityInstanceId}/data-mappings": {
      "get": {
        "tags": [
          "BPM Runtime"
        ],
        "description": "Get data mappings for the specified activity instance.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Update User Profile of currently logged in user",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "value": {
                  "type": "boolean"
                },
                "dataType": {
                  "type": "number"
                }
              }
            }
          },
          {
            "name": "activityInstanceId",
            "description": "activity instance ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Write data mappings of activity instance",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/activity-instances/{activityInstanceId}/data-mappings/{dataMappingId}": {
      "get": {
        "tags": [
          "BPM Runtime"
        ],
        "description": "Get the data mapping with the given ID for the specified activity instance.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Update User Profile of currently logged in user",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "boolean"
                },
                "dataType": {
                  "type": "number"
                }
              }
            }
          },
          {
            "name": "activityInstanceId",
            "description": "activity instance ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataMappingId",
            "description": "data mapping ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Write single data mapping of an activity instance",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "BPM Runtime"
        ],
        "description": "Get an array of tasks assigned to the logged in user.",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "processAddress": {
                    "type": "string"
                  },
                  "activityInstanceId": {
                    "type": "string"
                  },
                  "activityId": {
                    "type": "string"
                  },
                  "created": {
                    "type": "string"
                  },
                  "completed": {
                    "type": "boolean"
                  },
                  "performer": {
                    "type": "string"
                  },
                  "completedBy": {
                    "type": "string"
                  },
                  "state": {
                    "type": "number"
                  },
                  "agreementAddress": {
                    "type": "string"
                  },
                  "agreementName": {
                    "type": "string"
                  },
                  "processDefinitionAddress": {
                    "type": "string"
                  },
                  "processName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{activityInstanceId}/complete": {
      "put": {
        "tags": [
          "BPM Runtime"
        ],
        "description": "Completes the activity identified by the activityInstanceId. Optionally accepts 'data' array to write.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Update User Profile of currently logged in user",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "value": {
                  "type": "boolean"
                },
                "dataType": {
                  "type": "number"
                }
              }
            }
          },
          {
            "name": "activityInstanceId",
            "description": "The system generated id of the activity instance",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Complete task identified by the activityInstanceId",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/tasks/{activityInstanceId}/complete/{agreementAddress}/sign": {
      "put": {
        "tags": [
          "BPM Runtime"
        ],
        "description": "Create the agreement at the given address and then completes the activity\nidentified by the activityInstanceId.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "activityInstanceId",
            "description": "The system generated id of the activity instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "agreementAddress",
            "description": "The address of the agreement",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Sign the agreement and complete the activity",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/hoard": {
      "get": {
        "tags": [
          "Content"
        ],
        "description": "Read Content Object",
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Read Content Object",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Content"
        ],
        "description": "Create Content Object",
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Create Content Object",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "description": "Read Organizations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "approver",
            "description": "If the optional query parameter is given causes a JOIN query  to retrieve only organizations where the specified user is an approver. Value of 'true' will do the above for the authenticated user.",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Organization's Controller Contract"
                },
                "approvers": {
                  "type": "array",
                  "description": "Organization's machine readable ID",
                  "items": {
                    "type": "string"
                  }
                },
                "name": {
                  "type": "string",
                  "description": "Organization's human readable name"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "description": "Create a new organization also established the primary administrators for that organization. If no approvers are provided for the organization, then the currently logged-in user will be registered as an approver.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Create a New Organization",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Organization's machine readable ID"
                },
                "name": {
                  "type": "string",
                  "description": "Organization's human readable name"
                },
                "approvers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Organization's approvers are the adminsistrators of that organization\nand may approve the addition of new users into the organization, set the roles of users within the\norganization, as well as remove users from the organization. This array is optional.\nIf no approvers are passed, the currently logged-in user's address is used as the single\napprover of for the new organization."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "address of the created Organization"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{address}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "description": "Read a Single Organization",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Organization address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Organization's Controller Contract"
                },
                "organizationKey": {
                  "type": "string",
                  "description": "Hashed address (keccak256)"
                },
                "name": {
                  "type": "string",
                  "description": "Organization's human readable name"
                },
                "approvers": {
                  "type": "array",
                  "description": "Organization's machine readable ID",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    }
                  }
                },
                "users": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      },
                      "departments": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "departments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "users": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{orgId}/users/{userAddress}": {
      "put": {
        "tags": [
          "Organizations"
        ],
        "description": "Adds users to Organization",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "users": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "name": "orgId",
            "description": "organization's ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userAddress",
            "description": "user's address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Adds users to Organization",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "description": "Removes a user from Organization",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "organization's ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userAddress",
            "description": "user's address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Removes a user from Organization",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/organizations/{orgId}/approvers/{userAddress}": {
      "put": {
        "tags": [
          "Organizations"
        ],
        "description": "Adds approvers to Organization",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "users": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "name": "orgId",
            "description": "organization's ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userAddress",
            "description": "user's address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Adds approvers to Organization",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "description": "Removes an approver from Organization",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "orgId",
            "description": "organization's ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userAddress",
            "description": "user's address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Removes an approver from Organization",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/organizations/{address}/departments": {
      "put": {
        "tags": [
          "Organizations"
        ],
        "description": "a new department within an organization and add members to it",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Create a New Department in an Organization",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Department's human readable name"
                },
                "users": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Addresses of the members to add to the Department\nIf not given, department will be created with no members and members can be added later"
                }
              }
            }
          },
          {
            "name": "address",
            "description": "organization's address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "address of the Organization, the id and name of the department, and the users belonging to the department",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "users": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{address}/departments/{id}": {
      "delete": {
        "tags": [
          "Organizations"
        ],
        "description": "a department within an organization",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "department's ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "address",
            "description": "organization's address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Remove a Department",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/organizations/{address}/departments/{departmentId}/users": {
      "put": {
        "tags": [
          "Organizations"
        ],
        "description": "users to a department",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Add Users to a Department",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "users": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Addresses of the members to add to the Department."
                }
              }
            }
          },
          {
            "name": "departmentId",
            "description": "department's ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "address",
            "description": "organization's address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Add Users to a Department",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/organizations/{address}/departments/{departmentId}/users/{userAddress}": {
      "delete": {
        "tags": [
          "Organizations"
        ],
        "description": "a user from a department",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "departmentId",
            "description": "department's ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "address",
            "description": "organization's address",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userAddress",
            "description": "user's address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Remove User from a Department",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/static-data/iso/countries": {
      "get": {
        "tags": [
          "StaticData"
        ],
        "description": "Read Countries",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of countries objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "country": {
                    "type": "string"
                  },
                  "alpha2": {
                    "type": "string"
                  },
                  "alpha3": {
                    "type": "string"
                  },
                  "m49": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/static-data/iso/countries/{alpha2}": {
      "get": {
        "tags": [
          "StaticData"
        ],
        "description": "Get the country whose `alpha2` code matches the one passed as parameter.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alpha2",
            "description": "code",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A single countries objects",
            "schema": {
              "type": "object",
              "properties": {
                "country": {
                  "type": "string"
                },
                "alpha2": {
                  "type": "string"
                },
                "alpha3": {
                  "type": "string"
                },
                "m49": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/static-data/iso/countries/{alpha2}/regions": {
      "get": {
        "tags": [
          "StaticData"
        ],
        "description": "Get an array of regions belonging to the country\nwhose `alpha2` code matches the one passed as parameter. Note that a\nregion may have its `code2` OR `code3` property populated, NOT both.\nThus to represent regions in the UI dropdown, we can use\n`<alpha2>-<code2 or code3>` followed by the name.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alpha2",
            "description": "code",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of regions objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "country": {
                    "type": "string"
                  },
                  "region": {
                    "type": "string"
                  },
                  "alpha2": {
                    "type": "string"
                  },
                  "code2": {
                    "type": "string"
                  },
                  "code3": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/static-data/iso/currencies": {
      "get": {
        "tags": [
          "StaticData"
        ],
        "description": "Read Currencies",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of regions objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string"
                  },
                  "alpha3": {
                    "type": "string"
                  },
                  "m49": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/static-data/iso/currencies/{alpha3}": {
      "get": {
        "tags": [
          "StaticData"
        ],
        "description": "Get the currency whose `alpha3` code matches\nthe one passed as parameter.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alpha3",
            "description": "code",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A single countries objects",
            "schema": {
              "type": "object",
              "properties": {
                "currency": {
                  "type": "string"
                },
                "alpha3": {
                  "type": "string"
                },
                "m49": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/static-data/parameter-types": {
      "get": {
        "tags": [
          "StaticData"
        ],
        "description": "Read Parameter Types",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "object array",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "parameterType": {
                    "type": "integer"
                  },
                  "label": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/static-data/parameter-types/{id}": {
      "get": {
        "tags": [
          "StaticData"
        ],
        "description": "Read Single Parameter Type",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "code",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Read Single Parameter Type",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/static-data/collection-types": {
      "get": {
        "tags": [
          "StaticData"
        ],
        "description": "Read Collection Types",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "object array",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "collectionType": {
                    "type": "integer"
                  },
                  "label": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get user information. The `organization` query\nparameter is optional. It can be used to filter users belonging to a\nspecific organization or retrieving users not belonging to an\norganization, yet (via `?organization=null`).\n\nNote: The organization address is returned as\n\"0000000000000000000000000000000000000000\" for user that do not\nbelong to an organization.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "organization",
            "description": "If the optional parameter is given\nfilters users accordingly. May give the API the following options\n`<orgAddress>|null|notnull`",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Users's Controller Contract"
                },
                "username": {
                  "type": "string",
                  "description": "Users's machine readable ID"
                },
                "organization": {
                  "type": "string",
                  "description": "Organization's Controller Contract"
                },
                "organizationId": {
                  "type": "string",
                  "description": "Organization's machine readable ID"
                },
                "organizationName": {
                  "type": "string",
                  "description": "Organization's human readable name"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Create a new user.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string",
                  "description": "The user's userName"
                },
                "email": {
                  "type": "string",
                  "description": "The user's email address"
                },
                "password": {
                  "type": "string",
                  "description": "The user's password"
                },
                "isProducer": {
                  "type": "boolean",
                  "description": "Set to true to create a producer account instead of a consumer account (optional)"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "User's address"
                },
                "username": {
                  "type": "string",
                  "description": "User's name"
                }
              }
            }
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get a single users profile identified by the access token.",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Users's Controller Contract"
                },
                "username": {
                  "type": "string",
                  "description": "Users's human readable ID"
                },
                "email": {
                  "type": "string",
                  "description": "Users's email address"
                },
                "organization": {
                  "type": "string",
                  "description": "Organization's Controller Contract"
                },
                "organizationId": {
                  "type": "string",
                  "description": "Organization's machine readable ID"
                },
                "organizationName": {
                  "type": "string",
                  "description": "Organization's human readable name"
                },
                "firstName": {
                  "type": "string",
                  "description": "User's first name"
                },
                "lastName": {
                  "type": "string",
                  "description": "User's last name"
                },
                "country": {
                  "type": "string",
                  "description": "User's country code"
                },
                "region": {
                  "type": "string",
                  "description": "Contract address of user's region"
                },
                "isProducer": {
                  "type": "boolean",
                  "description": "Boolean representing whether user account is producer type (as opposed to consumer type)"
                },
                "onboarding": {
                  "type": "boolean",
                  "description": "Boolean representing whether user prefers to see onboarding screens"
                },
                "createdAt": {
                  "type": "string",
                  "description": "Timestamp of user account creation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Update a single users profile identified by the access token.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Update User Profile of currently logged in user",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "description": "User's first name (optional)"
                },
                "lastName": {
                  "type": "string",
                  "description": "User's last name (optional)"
                },
                "country": {
                  "type": "string",
                  "description": "User's country code (optional)"
                },
                "region": {
                  "type": "string",
                  "description": "Address of user's region (optional)"
                },
                "currentPassword": {
                  "type": "string",
                  "description": "User's current password (optional if new password not being set)"
                },
                "newPassword": {
                  "type": "string",
                  "description": "(optional)"
                },
                "isProducer": {
                  "type": "boolean",
                  "description": "Set account type to producer or consumer(optional)"
                },
                "onboarding": {
                  "type": "boolean",
                  "description": "Set user preference for viewing onboarding screens (optional)"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Users's Controller Contract"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Log in as a User",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Log in as a User",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string",
                  "description": "The user's username"
                },
                "password": {
                  "type": "string",
                  "description": "The user's password"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "The address of the user"
                },
                "username": {
                  "type": "string",
                  "description": "The username of the user"
                },
                "createdAt": {
                  "type": "string",
                  "description": "timestamp of the account creation"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Log out a User",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Log out a User",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users/token/validate": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Validates the JWT `access_token` which should be set as cookie in the request.",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "json",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "User's address"
                },
                "username": {
                  "type": "string",
                  "description": "User's name"
                }
              }
            }
          }
        }
      }
    },
    "/users/password-recovery": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Send an email with a password recovery code to the given email address.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Request password reset for a user account",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The user's email address"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request password reset for a user account",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users/password-recovery/{recoveryCode}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "if the given password recovery code is valid",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "recoveryCode",
            "description": "The password recovery code",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Validates the given password recovery code",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Reset the users password with the given password, if the recovery code is valid.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "recoveryCode",
            "description": "The password recovery code",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Reset password for user account",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users/activate/{activationCode}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Activate the user account.",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "activationCode",
            "description": "The activation code",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Activate user account",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {},
  "responses": {},
  "parameters": {},
  "securityDefinitions": {},
  "tags": []
}