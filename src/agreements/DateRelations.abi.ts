//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
interface Provider<Tx> {
    deploy(msg: Tx, callback: (err: Error, addr: Uint8Array) => void): void;
    call(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    callSim(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    listen(signature: string, address: string, callback: (err: Error, event: any) => void): Readable;
    payload(data: string, address?: string): Tx;
    encode(name: string, inputs: string[], ...args: any[]): string;
    decode(data: Uint8Array, outputs: string[]): any;
}
function Call<Tx, Output>(client: Provider<Tx>, addr: string, data: string, isSim: boolean, callback: (exec: Uint8Array) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    if (isSim)
        return new Promise((resolve, reject) => { client.callSim(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
    else
        return new Promise((resolve, reject) => { client.call(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
}
function Replace(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module DateRelations {
    export function Deploy<Tx>(client: Provider<Tx>, agreements_AgreementsAPI_sol_AgreementsAPI: string, commons_utils_Strings_sol_Strings: string): Promise<string> {
        let bytecode = "608060405234801561001057600080fd5b506116fc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063222a3a321461003b57806364afab72146100e8575b600080fd5b6100e66004803603608081101561005157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001906401000000008111156100a257600080fd5b8201836020820111156100b457600080fd5b803590602001918460018302840111640100000000831117156100d657600080fd5b9091929391929390505050610136565b005b610134600480360360408110156100fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bbf565b005b84600073__$4bfedefce7d76215a620e01b46747fdc01$__6360b7f43d836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b1580156101b357600080fd5b505af41580156101c7573d6000803e3d6000fd5b505050506040513d60408110156101dd57600080fd5b8101908080519060200190929190805190602001909291905050505080915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610480576103df6040518060600160405280602281526020016116a6602291398373ffffffffffffffffffffffffffffffffffffffff1673__$1483b111869e15ef6c698c5f10f0d4a934$__635a27587990916040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b1580156102e157600080fd5b505af41580156102f5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561031f57600080fd5b810190808051604051939291908464010000000082111561033f57600080fd5b8382019150602082018581111561035557600080fd5b825186600182028301116401000000008211171561037257600080fd5b8083526020830192505050908051906020019080838360005b838110156103a657808201518184015260208101905061038b565b50505050905090810190601f1680156103d35780820380516001836020036101000a031916815260200191505b50604052505050611051565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561044557808201518184015260208101905061042a565b50505050905090810190601f1680156104725780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b86868661048e838383611119565b15610a0b5761096a8273__$1483b111869e15ef6c698c5f10f0d4a934$__6315f05b0590916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b1580156104e757600080fd5b505af41580156104fb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561052557600080fd5b810190808051604051939291908464010000000082111561054557600080fd5b8382019150602082018581111561055b57600080fd5b825186600182028301116401000000008211171561057857600080fd5b8083526020830192505050908051906020019080838360005b838110156105ac578082015181840152602081019050610591565b50505050905090810190601f1680156105d95780820380516001836020036101000a031916815260200191505b506040525050506040518060400160405280600e81526020017f206f6e2061677265656d656e74200000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff1673__$1483b111869e15ef6c698c5f10f0d4a934$__630b39ed4790916040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b1580156106a957600080fd5b505af41580156106bd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156106e757600080fd5b810190808051604051939291908464010000000082111561070757600080fd5b8382019150602082018581111561071d57600080fd5b825186600182028301116401000000008211171561073a57600080fd5b8083526020830192505050908051906020019080838360005b8381101561076e578082015181840152602081019050610753565b50505050905090810190601f16801561079b5780820380516001836020036101000a031916815260200191505b506040525050506040518060400160405280601081526020017f697320646572697665642066726f6d20000000000000000000000000000000008152508573__$1483b111869e15ef6c698c5f10f0d4a934$__6315f05b0590916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561082957600080fd5b505af415801561083d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561086757600080fd5b810190808051604051939291908464010000000082111561088757600080fd5b8382019150602082018581111561089d57600080fd5b82518660018202830111640100000000821117156108ba57600080fd5b8083526020830192505050908051906020019080838360005b838110156108ee5780820151818401526020810190506108d3565b50505050905090810190601f16801561091b5780820380516001836020036101000a031916815260200191505b506040525050506040518060400160405280600581526020017f44617465200000000000000000000000000000000000000000000000000000008152506112e19095949392919063ffffffff16565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109d05780820151818401526020810190506109b5565b50505050905090810190601f1680156109fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000610a178b8b6114f9565b905080600080838152602001908152602001600020600001819055508a60008083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508960008083815260200190815260200160002060020181905550886000808381526020019081526020016000206003018190555087876000808481526020019081526020016000206004019190610adf929190611561565b50600160008083815260200190815260200160002060050160006101000a81548160ff021916908315150217905550898b73ffffffffffffffffffffffffffffffffffffffff167f414e3a2f2f646174652d72656c6174696f6e00000000000000000000000000007f24afacb07df9e937e5b31845655a77bebfb01411f47269091a2762a471e80fb88c8c8c60405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a45050505050505050505050565b81600073__$4bfedefce7d76215a620e01b46747fdc01$__6360b7f43d836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b158015610c3c57600080fd5b505af4158015610c50573d6000803e3d6000fd5b505050506040513d6040811015610c6657600080fd5b8101908080519060200190929190805190602001909291905050505080915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f0957610e686040518060600160405280602281526020016116a6602291398373ffffffffffffffffffffffffffffffffffffffff1673__$1483b111869e15ef6c698c5f10f0d4a934$__635a27587990916040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b158015610d6a57600080fd5b505af4158015610d7e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610da857600080fd5b8101908080516040519392919084640100000000821115610dc857600080fd5b83820191506020820185811115610dde57600080fd5b8251866001820283011164010000000082111715610dfb57600080fd5b8083526020830192505050908051906020019080838360005b83811015610e2f578082015181840152602081019050610e14565b50505050905090810190601f168015610e5c5780820380516001836020036101000a031916815260200191505b50604052505050611051565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ece578082015181840152602081019050610eb3565b50505050905090810190601f168015610efb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000610f1585856114f9565b90506000808281526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160009055600482016000610f7991906115e1565b6005820160006101000a81549060ff021916905550506000808281526020019081526020016000206002015460008083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f414e3a2f2f646174652d72656c6174696f6e00000000000000000000000000007f0891ad488d66c49e5d5aa5a66c9f0dba033a462c1ab343fc68de60024450b74a60006040518082815260200191505060405180910390a45050505050565b606082826040516020018083805190602001908083835b6020831061108b5780518252602082019150602081019050602083039250611068565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106110dc57805182526020820191506020810190506020830392506110b9565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60008183141561112c57600190506112da565b611134611629565b60008061114187866114f9565b81526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112675780601f1061123c57610100808354040283529160200191611267565b820191906000526020600020905b81548152906001019060200180831161124a57829003601f168201915b505050505081526020016005820160009054906101000a900460ff16151515158152505090508060a001516112a05760009150506112da565b83816060015114156112b65760019150506112da565b6112c585858360600151611119565b156112d45760019150506112da565b60009150505b9392505050565b60608686868686866040516020018087805190602001908083835b6020831061131f57805182526020820191506020810190506020830392506112fc565b6001836020036101000a03801982511681845116808217855250505050505090500186805190602001908083835b60208310611370578051825260208201915060208101905060208303925061134d565b6001836020036101000a03801982511681845116808217855250505050505090500185805190602001908083835b602083106113c1578051825260208201915060208101905060208303925061139e565b6001836020036101000a03801982511681845116808217855250505050505090500184805190602001908083835b6020831061141257805182526020820191506020810190506020830392506113ef565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083106114635780518252602082019150602081019050602083039250611440565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106114b45780518252602082019150602081019050602083039250611491565b6001836020036101000a038019825116818451168082178552505050505050905001965050505050505060405160208183030381529060405290509695505050505050565b60008282604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019250505060405160208183030381529060405280519060200120905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106115a257803560ff19168380011785556115d0565b828001600101855582156115d0579182015b828111156115cf5782358255916020019190600101906115b4565b5b5090506115dd9190611680565b5090565b50805460018160011615610100020316600290046000825580601f106116075750611626565b601f0160209004906000526020600020908101906116259190611680565b5b50565b6040518060c0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000801916815260200160008019168152602001606081526020016000151581525090565b6116a291905b8082111561169e576000816000905550600101611686565b5090565b9056fe43616c6c6572206973206e6f7420706172747920746f2061677265656d656e743a20a265627a7a72315820ad7ad14fe5d2a5a20bc1ea9cd23e5b3d2c999901ab8f627bfab0651186beb76664736f6c634300050c0032";
        bytecode = Replace(bytecode, "$4bfedefce7d76215a620e01b46747fdc01$", agreements_AgreementsAPI_sol_AgreementsAPI);
        bytecode = Replace(bytecode, "$1483b111869e15ef6c698c5f10f0d4a934$", commons_utils_Strings_sol_Strings);
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => { client.deploy(payload, (err, addr) => {
            if (err)
                reject(err);
            else {
                const address = Buffer.from(addr).toString("hex").toUpperCase();
                resolve(address);
            }
        }); });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        LogDeleteAgreementDateRelation(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogDeleteAgreementDateRelation", this.address, callback); }
        LogInitAgreementDateRelation(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogInitAgreementDateRelation", this.address, callback); }
        relate(agreementAddress: string, derived: Buffer, base: Buffer, offset: string) {
            const data = Encode(this.client).relate(agreementAddress, derived, base, offset);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).relate();
            });
        }
        remove(agreementAddress: string, derived: Buffer) {
            const data = Encode(this.client).remove(agreementAddress, derived);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).remove();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        relate: (agreementAddress: string, derived: Buffer, base: Buffer, offset: string) => { return client.encode("222A3A32", ["address", "bytes32", "bytes32", "string"], agreementAddress, derived, base, offset); },
        remove: (agreementAddress: string, derived: Buffer) => { return client.encode("64AFAB72", ["address", "bytes32"], agreementAddress, derived); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        relate: (): void => { return; },
        remove: (): void => { return; }
    }; };
}