//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
interface Provider<Tx> {
    deploy(msg: Tx, callback: (err: Error, addr: Uint8Array) => void): void;
    call(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    callSim(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    listen(signature: string, address: string, callback: (err: Error, event: any) => void): Readable;
    payload(data: string, address?: string): Tx;
    encode(name: string, inputs: string[], ...args: any[]): string;
    decode(data: Uint8Array, outputs: string[]): any;
}
function Call<Tx, Output>(client: Provider<Tx>, addr: string, data: string, isSim: boolean, callback: (exec: Uint8Array) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    if (isSim)
        return new Promise((resolve, reject) => { client.callSim(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
    else
        return new Promise((resolve, reject) => { client.call(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
}
function Replace(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module IsoCurrencies100 {
    export function Deploy<Tx>(client: Provider<Tx>, commons_base_ErrorsLib_sol_ErrorsLib: string): Promise<string> {
        let bytecode = "$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156184ed618db4565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b8381101561854e578082015181840152602081019050618533565b50505050905090810190601f16801561857b5780820380516001836020036101000a031916815260200191505b50848103835260158152602001807f4f776e65642e7072655f6f6e6c7942794f776e657200000000000000000000008152506020018481038252601f8152602001807f546865206d73672e73656e646572206973206e6f7420746865206f776e6572008152506020019550505050505060006040518083038186803b15801561860357600080fd5b505af4158015618617573d6000803e3d6000fd5b5050505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461866d618df1565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156186ce5780820151818401526020810190506186b3565b50505050905090810190601f1680156186fb5780820380516001836020036101000a031916815260200191505b50848103835260178152602001807f4f776e65642e7472616e736665724f776e6572736869700000000000000000008152506020018481038252601e8152602001807f546865206e6577206f776e6572206d757374206e6f74206265204e554c4c00008152506020019550505050505060006040518083038186803b15801561878357600080fd5b505af4158015618797573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146188eb5780600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ffcf23a92150d56e85e3a3d33b357493246e55783095eb6a733eb8439ffc752c8600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461894a57618b1b565b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614618ad457600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f363fec9836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015618a4157600080fd5b505af1158015618a55573d6000803e3d6000fd5b505050506040513d6020811015618a6b57600080fd5b8101908080519060200190929190505050618a895760009050618acf565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190505b618b1a565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190505b5b919050565b7f434846000000000000000000000000000000000000000000000000000000000081565b7f50474b000000000000000000000000000000000000000000000000000000000081565b7f4c534c000000000000000000000000000000000000000000000000000000000081565b7f414544000000000000000000000000000000000000000000000000000000000081565b7f584244000000000000000000000000000000000000000000000000000000000081565b7f4e494f000000000000000000000000000000000000000000000000000000000081565b7f424946000000000000000000000000000000000000000000000000000000000081565b7f585858000000000000000000000000000000000000000000000000000000000081565b7f4d574b000000000000000000000000000000000000000000000000000000000081565b7f415544000000000000000000000000000000000000000000000000000000000081565b7f424f56000000000000000000000000000000000000000000000000000000000081565b7f554758000000000000000000000000000000000000000000000000000000000081565b60006001905090565b6000610bba905090565b600061100a905090565b6000610fa0905090565b6000611008905090565b6000618d2f83600060038110618d1357fe5b602002015183600060038110618d2557fe5b6020020151618e2e565b905060008114618d4157809050618dae565b618d6d83600160038110618d5157fe5b602002015183600160038110618d6357fe5b6020020151618e2e565b905060008114618d7f57809050618dae565b618dab83600260038110618d8f57fe5b602002015183600260038110618da157fe5b6020020151618e2e565b90505b92915050565b60606040518060400160405280600681526020017f4552523430330000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523631310000000000000000000000000000000000000000000000000000815250905090565b60008260ff168260ff161415618e475760009050618e82565b8260ff168260ff161015618e7d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050618e82565b600190505b92915050565b604051806060016040528060039060208202803883398082019150509050509056fea265627a7a723158202519f4e29666392728dd4c0ee71682c4fc66731641369d8c42fae9e68d064e7d64736f6c634300050c0032426f736e696120616e64204865727a65676f76696e6120636f6e7665727469626c65206d61726b55727567756179205065736f20656e20556e69646164657320496e646578616461732028555255495552554929202866756e647320636f646529556e696461642064652056616c6f72205265616c202855565229202866756e647320636f64652941444220556e6974206f66204163636f756e74094166726963616e20446576656c6f706d656e742042616e6b535543524509556e69666965642053797374656d20666f7220526567696f6e616c20436f6d70656e736174696f6e20285355435245294575726f7065616e20556e6974206f66204163636f756e742031372028452e552e412e2d313729574952204672616e632028636f6d706c656d656e746172792063757272656e6379294575726f7065616e20556e6974206f66204163636f756e7420392028452e552e412e2d3929556e697465642053746174657320646f6c6c617220286e6578742064617929202866756e647320636f6465294d65786963616e20556e6964616420646520496e76657273696f6e202855444929202866756e647320636f646529436f646520726573657276656420666f722074657374696e6720707572706f736573574952204575726f2028636f6d706c656d656e746172792063757272656e6379294575726f7065616e204d6f6e657461727920556e69742028452e4d2e552e2d3629";
        bytecode = Replace(bytecode, "$ecfb6c4d3c3ceff197e19e585a0a53728c$", commons_base_ErrorsLib_sol_ErrorsLib);
        const data = bytecode + client.encode("", []);
        const payload = client.payload(data);
        return new Promise((resolve, reject) => { client.deploy(payload, (err, addr) => {
            if (err)
                reject(err);
            else {
                const address = Buffer.from(addr).toString("hex").toUpperCase();
                resolve(address);
            }
        }); });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        LogCurrencyRegistration(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogCurrencyRegistration", this.address, callback); }
        LogOwnerChanged(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogOwnerChanged", this.address, callback); }
        AED() {
            const data = Encode(this.client).AED();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).AED();
            });
        }
        AFN() {
            const data = Encode(this.client).AFN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).AFN();
            });
        }
        ALL() {
            const data = Encode(this.client).ALL();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ALL();
            });
        }
        AMD() {
            const data = Encode(this.client).AMD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).AMD();
            });
        }
        ANG() {
            const data = Encode(this.client).ANG();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ANG();
            });
        }
        AOA() {
            const data = Encode(this.client).AOA();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).AOA();
            });
        }
        ARS() {
            const data = Encode(this.client).ARS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ARS();
            });
        }
        AUD() {
            const data = Encode(this.client).AUD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).AUD();
            });
        }
        AWG() {
            const data = Encode(this.client).AWG();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).AWG();
            });
        }
        AZN() {
            const data = Encode(this.client).AZN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).AZN();
            });
        }
        BAM() {
            const data = Encode(this.client).BAM();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BAM();
            });
        }
        BBD() {
            const data = Encode(this.client).BBD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BBD();
            });
        }
        BDT() {
            const data = Encode(this.client).BDT();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BDT();
            });
        }
        BGN() {
            const data = Encode(this.client).BGN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BGN();
            });
        }
        BHD() {
            const data = Encode(this.client).BHD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BHD();
            });
        }
        BIF() {
            const data = Encode(this.client).BIF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BIF();
            });
        }
        BMD() {
            const data = Encode(this.client).BMD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BMD();
            });
        }
        BND() {
            const data = Encode(this.client).BND();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BND();
            });
        }
        BOB() {
            const data = Encode(this.client).BOB();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BOB();
            });
        }
        BOV() {
            const data = Encode(this.client).BOV();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BOV();
            });
        }
        BRL() {
            const data = Encode(this.client).BRL();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BRL();
            });
        }
        BSD() {
            const data = Encode(this.client).BSD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BSD();
            });
        }
        BTN() {
            const data = Encode(this.client).BTN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BTN();
            });
        }
        BWP() {
            const data = Encode(this.client).BWP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BWP();
            });
        }
        BYN() {
            const data = Encode(this.client).BYN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BYN();
            });
        }
        BZD() {
            const data = Encode(this.client).BZD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).BZD();
            });
        }
        CAD() {
            const data = Encode(this.client).CAD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CAD();
            });
        }
        CDF() {
            const data = Encode(this.client).CDF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CDF();
            });
        }
        CHE() {
            const data = Encode(this.client).CHE();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CHE();
            });
        }
        CHF() {
            const data = Encode(this.client).CHF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CHF();
            });
        }
        CHW() {
            const data = Encode(this.client).CHW();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CHW();
            });
        }
        CLF() {
            const data = Encode(this.client).CLF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CLF();
            });
        }
        CLP() {
            const data = Encode(this.client).CLP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CLP();
            });
        }
        CNY() {
            const data = Encode(this.client).CNY();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CNY();
            });
        }
        COP() {
            const data = Encode(this.client).COP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).COP();
            });
        }
        COU() {
            const data = Encode(this.client).COU();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).COU();
            });
        }
        CRC() {
            const data = Encode(this.client).CRC();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CRC();
            });
        }
        CUC() {
            const data = Encode(this.client).CUC();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CUC();
            });
        }
        CUP() {
            const data = Encode(this.client).CUP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CUP();
            });
        }
        CVE() {
            const data = Encode(this.client).CVE();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CVE();
            });
        }
        CZK() {
            const data = Encode(this.client).CZK();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).CZK();
            });
        }
        DJF() {
            const data = Encode(this.client).DJF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).DJF();
            });
        }
        DKK() {
            const data = Encode(this.client).DKK();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).DKK();
            });
        }
        DOP() {
            const data = Encode(this.client).DOP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).DOP();
            });
        }
        DZD() {
            const data = Encode(this.client).DZD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).DZD();
            });
        }
        EGP() {
            const data = Encode(this.client).EGP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).EGP();
            });
        }
        ERN() {
            const data = Encode(this.client).ERN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ERN();
            });
        }
        ETB() {
            const data = Encode(this.client).ETB();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ETB();
            });
        }
        EUR() {
            const data = Encode(this.client).EUR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).EUR();
            });
        }
        EVENT_ID_ISO_CURRENCIES() {
            const data = Encode(this.client).EVENT_ID_ISO_CURRENCIES();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).EVENT_ID_ISO_CURRENCIES();
            });
        }
        FJD() {
            const data = Encode(this.client).FJD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).FJD();
            });
        }
        FKP() {
            const data = Encode(this.client).FKP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).FKP();
            });
        }
        GBP() {
            const data = Encode(this.client).GBP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).GBP();
            });
        }
        GEL() {
            const data = Encode(this.client).GEL();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).GEL();
            });
        }
        GHS() {
            const data = Encode(this.client).GHS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).GHS();
            });
        }
        GIP() {
            const data = Encode(this.client).GIP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).GIP();
            });
        }
        GMD() {
            const data = Encode(this.client).GMD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).GMD();
            });
        }
        GNF() {
            const data = Encode(this.client).GNF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).GNF();
            });
        }
        GTQ() {
            const data = Encode(this.client).GTQ();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).GTQ();
            });
        }
        GYD() {
            const data = Encode(this.client).GYD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).GYD();
            });
        }
        HKD() {
            const data = Encode(this.client).HKD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).HKD();
            });
        }
        HNL() {
            const data = Encode(this.client).HNL();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).HNL();
            });
        }
        HRK() {
            const data = Encode(this.client).HRK();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).HRK();
            });
        }
        HTG() {
            const data = Encode(this.client).HTG();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).HTG();
            });
        }
        HUF() {
            const data = Encode(this.client).HUF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).HUF();
            });
        }
        IDR() {
            const data = Encode(this.client).IDR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).IDR();
            });
        }
        ILS() {
            const data = Encode(this.client).ILS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ILS();
            });
        }
        INR() {
            const data = Encode(this.client).INR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).INR();
            });
        }
        IQD() {
            const data = Encode(this.client).IQD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).IQD();
            });
        }
        IRR() {
            const data = Encode(this.client).IRR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).IRR();
            });
        }
        ISK() {
            const data = Encode(this.client).ISK();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ISK();
            });
        }
        JMD() {
            const data = Encode(this.client).JMD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).JMD();
            });
        }
        JOD() {
            const data = Encode(this.client).JOD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).JOD();
            });
        }
        JPY() {
            const data = Encode(this.client).JPY();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).JPY();
            });
        }
        KES() {
            const data = Encode(this.client).KES();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).KES();
            });
        }
        KGS() {
            const data = Encode(this.client).KGS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).KGS();
            });
        }
        KHR() {
            const data = Encode(this.client).KHR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).KHR();
            });
        }
        KMF() {
            const data = Encode(this.client).KMF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).KMF();
            });
        }
        KPW() {
            const data = Encode(this.client).KPW();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).KPW();
            });
        }
        KRW() {
            const data = Encode(this.client).KRW();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).KRW();
            });
        }
        KWD() {
            const data = Encode(this.client).KWD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).KWD();
            });
        }
        KYD() {
            const data = Encode(this.client).KYD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).KYD();
            });
        }
        KZT() {
            const data = Encode(this.client).KZT();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).KZT();
            });
        }
        LAK() {
            const data = Encode(this.client).LAK();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).LAK();
            });
        }
        LBP() {
            const data = Encode(this.client).LBP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).LBP();
            });
        }
        LKR() {
            const data = Encode(this.client).LKR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).LKR();
            });
        }
        LRD() {
            const data = Encode(this.client).LRD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).LRD();
            });
        }
        LSL() {
            const data = Encode(this.client).LSL();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).LSL();
            });
        }
        LYD() {
            const data = Encode(this.client).LYD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).LYD();
            });
        }
        MAD() {
            const data = Encode(this.client).MAD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MAD();
            });
        }
        MDL() {
            const data = Encode(this.client).MDL();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MDL();
            });
        }
        MGA() {
            const data = Encode(this.client).MGA();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MGA();
            });
        }
        MKD() {
            const data = Encode(this.client).MKD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MKD();
            });
        }
        MMK() {
            const data = Encode(this.client).MMK();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MMK();
            });
        }
        MNT() {
            const data = Encode(this.client).MNT();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MNT();
            });
        }
        MOP() {
            const data = Encode(this.client).MOP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MOP();
            });
        }
        MRO() {
            const data = Encode(this.client).MRO();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MRO();
            });
        }
        MUR() {
            const data = Encode(this.client).MUR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MUR();
            });
        }
        MVR() {
            const data = Encode(this.client).MVR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MVR();
            });
        }
        MWK() {
            const data = Encode(this.client).MWK();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MWK();
            });
        }
        MXN() {
            const data = Encode(this.client).MXN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MXN();
            });
        }
        MXV() {
            const data = Encode(this.client).MXV();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MXV();
            });
        }
        MYR() {
            const data = Encode(this.client).MYR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MYR();
            });
        }
        MZN() {
            const data = Encode(this.client).MZN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).MZN();
            });
        }
        NAD() {
            const data = Encode(this.client).NAD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).NAD();
            });
        }
        NGN() {
            const data = Encode(this.client).NGN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).NGN();
            });
        }
        NIO() {
            const data = Encode(this.client).NIO();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).NIO();
            });
        }
        NOK() {
            const data = Encode(this.client).NOK();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).NOK();
            });
        }
        NPR() {
            const data = Encode(this.client).NPR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).NPR();
            });
        }
        NZD() {
            const data = Encode(this.client).NZD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).NZD();
            });
        }
        OMR() {
            const data = Encode(this.client).OMR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).OMR();
            });
        }
        PAB() {
            const data = Encode(this.client).PAB();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).PAB();
            });
        }
        PEN() {
            const data = Encode(this.client).PEN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).PEN();
            });
        }
        PGK() {
            const data = Encode(this.client).PGK();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).PGK();
            });
        }
        PHP() {
            const data = Encode(this.client).PHP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).PHP();
            });
        }
        PKR() {
            const data = Encode(this.client).PKR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).PKR();
            });
        }
        PLN() {
            const data = Encode(this.client).PLN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).PLN();
            });
        }
        PYG() {
            const data = Encode(this.client).PYG();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).PYG();
            });
        }
        QAR() {
            const data = Encode(this.client).QAR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).QAR();
            });
        }
        RON() {
            const data = Encode(this.client).RON();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).RON();
            });
        }
        RSD() {
            const data = Encode(this.client).RSD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).RSD();
            });
        }
        RUB() {
            const data = Encode(this.client).RUB();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).RUB();
            });
        }
        RWF() {
            const data = Encode(this.client).RWF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).RWF();
            });
        }
        SAR() {
            const data = Encode(this.client).SAR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SAR();
            });
        }
        SBD() {
            const data = Encode(this.client).SBD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SBD();
            });
        }
        SCR() {
            const data = Encode(this.client).SCR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SCR();
            });
        }
        SDG() {
            const data = Encode(this.client).SDG();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SDG();
            });
        }
        SEK() {
            const data = Encode(this.client).SEK();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SEK();
            });
        }
        SGD() {
            const data = Encode(this.client).SGD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SGD();
            });
        }
        SHP() {
            const data = Encode(this.client).SHP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SHP();
            });
        }
        SLL() {
            const data = Encode(this.client).SLL();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SLL();
            });
        }
        SOS() {
            const data = Encode(this.client).SOS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SOS();
            });
        }
        SRD() {
            const data = Encode(this.client).SRD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SRD();
            });
        }
        SSP() {
            const data = Encode(this.client).SSP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SSP();
            });
        }
        STD() {
            const data = Encode(this.client).STD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).STD();
            });
        }
        SVC() {
            const data = Encode(this.client).SVC();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SVC();
            });
        }
        SYP() {
            const data = Encode(this.client).SYP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SYP();
            });
        }
        SZL() {
            const data = Encode(this.client).SZL();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).SZL();
            });
        }
        THB() {
            const data = Encode(this.client).THB();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).THB();
            });
        }
        TJS() {
            const data = Encode(this.client).TJS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).TJS();
            });
        }
        TMT() {
            const data = Encode(this.client).TMT();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).TMT();
            });
        }
        TND() {
            const data = Encode(this.client).TND();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).TND();
            });
        }
        TOP() {
            const data = Encode(this.client).TOP();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).TOP();
            });
        }
        TRY() {
            const data = Encode(this.client).TRY();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).TRY();
            });
        }
        TTD() {
            const data = Encode(this.client).TTD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).TTD();
            });
        }
        TWD() {
            const data = Encode(this.client).TWD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).TWD();
            });
        }
        TZS() {
            const data = Encode(this.client).TZS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).TZS();
            });
        }
        UAH() {
            const data = Encode(this.client).UAH();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).UAH();
            });
        }
        UGX() {
            const data = Encode(this.client).UGX();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).UGX();
            });
        }
        USD() {
            const data = Encode(this.client).USD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).USD();
            });
        }
        USN() {
            const data = Encode(this.client).USN();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).USN();
            });
        }
        UYI() {
            const data = Encode(this.client).UYI();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).UYI();
            });
        }
        UYU() {
            const data = Encode(this.client).UYU();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).UYU();
            });
        }
        UZS() {
            const data = Encode(this.client).UZS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).UZS();
            });
        }
        VEF() {
            const data = Encode(this.client).VEF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).VEF();
            });
        }
        VND() {
            const data = Encode(this.client).VND();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).VND();
            });
        }
        VUV() {
            const data = Encode(this.client).VUV();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).VUV();
            });
        }
        WST() {
            const data = Encode(this.client).WST();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).WST();
            });
        }
        XAF() {
            const data = Encode(this.client).XAF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XAF();
            });
        }
        XAG() {
            const data = Encode(this.client).XAG();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XAG();
            });
        }
        XAU() {
            const data = Encode(this.client).XAU();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XAU();
            });
        }
        XBA() {
            const data = Encode(this.client).XBA();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XBA();
            });
        }
        XBB() {
            const data = Encode(this.client).XBB();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XBB();
            });
        }
        XBC() {
            const data = Encode(this.client).XBC();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XBC();
            });
        }
        XBD() {
            const data = Encode(this.client).XBD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XBD();
            });
        }
        XCD() {
            const data = Encode(this.client).XCD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XCD();
            });
        }
        XDR() {
            const data = Encode(this.client).XDR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XDR();
            });
        }
        XOF() {
            const data = Encode(this.client).XOF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XOF();
            });
        }
        XPD() {
            const data = Encode(this.client).XPD();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XPD();
            });
        }
        XPF() {
            const data = Encode(this.client).XPF();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XPF();
            });
        }
        XPT() {
            const data = Encode(this.client).XPT();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XPT();
            });
        }
        XSU() {
            const data = Encode(this.client).XSU();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XSU();
            });
        }
        XTS() {
            const data = Encode(this.client).XTS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XTS();
            });
        }
        XUA() {
            const data = Encode(this.client).XUA();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XUA();
            });
        }
        XXX() {
            const data = Encode(this.client).XXX();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).XXX();
            });
        }
        YER() {
            const data = Encode(this.client).YER();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).YER();
            });
        }
        ZAR() {
            const data = Encode(this.client).ZAR();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ZAR();
            });
        }
        ZMW() {
            const data = Encode(this.client).ZMW();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ZMW();
            });
        }
        ZWL() {
            const data = Encode(this.client).ZWL();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ZWL();
            });
        }
        appendNewVersion(_link: string) {
            const data = Encode(this.client).appendNewVersion(_link);
            return Call<Tx, {
                error: number;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).appendNewVersion();
            });
        }
        compareVersion(_other: string, _version: [number, number, number]) {
            const data = Encode(this.client).compareVersion(_other, _version);
            return Call<Tx, {
                result: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).compareVersion();
            });
        }
        currencies() {
            const data = Encode(this.client).currencies();
            return Call<Tx, {
                alpha3: Buffer;
                m49: Buffer;
                name: string;
                exists: boolean;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).currencies();
            });
        }
        getCurrencyAtIndex(_index: number) {
            const data = Encode(this.client).getCurrencyAtIndex(_index);
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getCurrencyAtIndex();
            });
        }
        getCurrencyData(_key: Buffer) {
            const data = Encode(this.client).getCurrencyData(_key);
            return Call<Tx, {
                alpha3: Buffer;
                m49: Buffer;
                name: string;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getCurrencyData();
            });
        }
        getLatest() {
            const data = Encode(this.client).getLatest();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getLatest();
            });
        }
        getNumberOfCurrencies() {
            const data = Encode(this.client).getNumberOfCurrencies();
            return Call<Tx, {
                size: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfCurrencies();
            });
        }
        getOwner() {
            const data = Encode(this.client).getOwner();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getOwner();
            });
        }
        getPredecessor() {
            const data = Encode(this.client).getPredecessor();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getPredecessor();
            });
        }
        getSuccessor() {
            const data = Encode(this.client).getSuccessor();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getSuccessor();
            });
        }
        getTargetVersion(_targetVer: [number, number, number]) {
            const data = Encode(this.client).getTargetVersion(_targetVer);
            return Call<Tx, {
                targetAddr: string;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getTargetVersion();
            });
        }
        getVersion() {
            const data = Encode(this.client).getVersion();
            return Call<Tx, [[number, number, number]]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getVersion();
            });
        }
        getVersionMajor() {
            const data = Encode(this.client).getVersionMajor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getVersionMajor();
            });
        }
        getVersionMinor() {
            const data = Encode(this.client).getVersionMinor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getVersionMinor();
            });
        }
        getVersionPatch() {
            const data = Encode(this.client).getVersionPatch();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getVersionPatch();
            });
        }
        isCurrency(_alpha3: Buffer) {
            const data = Encode(this.client).isCurrency(_alpha3);
            return Call<Tx, [boolean]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).isCurrency();
            });
        }
        setLatest(_latest: string) {
            const data = Encode(this.client).setLatest(_latest);
            return Call<Tx, {
                success: boolean;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).setLatest();
            });
        }
        setPredecessor() {
            const data = Encode(this.client).setPredecessor();
            return Call<Tx, {
                error: number;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).setPredecessor();
            });
        }
        transferOwnership(_newOwner: string) {
            const data = Encode(this.client).transferOwnership(_newOwner);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferOwnership();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        AED: () => { return client.encode("F6AAC0D5", []); },
        AFN: () => { return client.encode("63A7BA2D", []); },
        ALL: () => { return client.encode("435F0D41", []); },
        AMD: () => { return client.encode("7E57CB4D", []); },
        ANG: () => { return client.encode("6F62EC9C", []); },
        AOA: () => { return client.encode("A68FEAA3", []); },
        ARS: () => { return client.encode("0C012834", []); },
        AUD: () => { return client.encode("FD760C49", []); },
        AWG: () => { return client.encode("7237906D", []); },
        AZN: () => { return client.encode("5A45D968", []); },
        BAM: () => { return client.encode("69957E58", []); },
        BBD: () => { return client.encode("80A348E9", []); },
        BDT: () => { return client.encode("55D90A3A", []); },
        BGN: () => { return client.encode("80D51EA4", []); },
        BHD: () => { return client.encode("3636EB40", []); },
        BIF: () => { return client.encode("FABB67B9", []); },
        BMD: () => { return client.encode("5BF8A580", []); },
        BND: () => { return client.encode("E5E7DB9D", []); },
        BOB: () => { return client.encode("E4019E07", []); },
        BOV: () => { return client.encode("FFA71D3D", []); },
        BRL: () => { return client.encode("6B09583C", []); },
        BSD: () => { return client.encode("E0771FC4", []); },
        BTN: () => { return client.encode("5CBF0850", []); },
        BWP: () => { return client.encode("4E8C7A11", []); },
        BYN: () => { return client.encode("A55EE823", []); },
        BZD: () => { return client.encode("E13090AB", []); },
        CAD: () => { return client.encode("19342A64", []); },
        CDF: () => { return client.encode("CA0DA3EF", []); },
        CHE: () => { return client.encode("07805372", []); },
        CHF: () => { return client.encode("F37FCC42", []); },
        CHW: () => { return client.encode("5579996D", []); },
        CLF: () => { return client.encode("613DE174", []); },
        CLP: () => { return client.encode("358AD2E2", []); },
        CNY: () => { return client.encode("A4A23595", []); },
        COP: () => { return client.encode("1A9EE360", []); },
        COU: () => { return client.encode("57CC0959", []); },
        CRC: () => { return client.encode("4F2B324F", []); },
        CUC: () => { return client.encode("37BB223E", []); },
        CUP: () => { return client.encode("E7D87344", []); },
        CVE: () => { return client.encode("7542B250", []); },
        CZK: () => { return client.encode("9387FF04", []); },
        DJF: () => { return client.encode("E4EE2149", []); },
        DKK: () => { return client.encode("0C5A9D55", []); },
        DOP: () => { return client.encode("D1328BB7", []); },
        DZD: () => { return client.encode("103D74F2", []); },
        EGP: () => { return client.encode("0B0C27A6", []); },
        ERN: () => { return client.encode("9B437365", []); },
        ETB: () => { return client.encode("44A51D8F", []); },
        EUR: () => { return client.encode("294A2BF2", []); },
        EVENT_ID_ISO_CURRENCIES: () => { return client.encode("7181D5CB", []); },
        FJD: () => { return client.encode("CF4A1224", []); },
        FKP: () => { return client.encode("48153158", []); },
        GBP: () => { return client.encode("01B8B339", []); },
        GEL: () => { return client.encode("300F03AB", []); },
        GHS: () => { return client.encode("D537CE0E", []); },
        GIP: () => { return client.encode("7FDE2873", []); },
        GMD: () => { return client.encode("54E8B002", []); },
        GNF: () => { return client.encode("5729217B", []); },
        GTQ: () => { return client.encode("6F41F9C4", []); },
        GYD: () => { return client.encode("A70E076F", []); },
        HKD: () => { return client.encode("D4689D9E", []); },
        HNL: () => { return client.encode("518FE719", []); },
        HRK: () => { return client.encode("B6A7D470", []); },
        HTG: () => { return client.encode("73CA5106", []); },
        HUF: () => { return client.encode("65D4FD90", []); },
        IDR: () => { return client.encode("191340E6", []); },
        ILS: () => { return client.encode("ACC80008", []); },
        INR: () => { return client.encode("E774928E", []); },
        IQD: () => { return client.encode("08FB73E8", []); },
        IRR: () => { return client.encode("68A8344C", []); },
        ISK: () => { return client.encode("094D8262", []); },
        JMD: () => { return client.encode("E70E5CA5", []); },
        JOD: () => { return client.encode("CF380C92", []); },
        JPY: () => { return client.encode("465BD0A3", []); },
        KES: () => { return client.encode("3D7F3798", []); },
        KGS: () => { return client.encode("4C464D5A", []); },
        KHR: () => { return client.encode("839B5471", []); },
        KMF: () => { return client.encode("A6F0E8F7", []); },
        KPW: () => { return client.encode("47123FCC", []); },
        KRW: () => { return client.encode("56EF4514", []); },
        KWD: () => { return client.encode("36F3A6CC", []); },
        KYD: () => { return client.encode("10216FC9", []); },
        KZT: () => { return client.encode("6D818108", []); },
        LAK: () => { return client.encode("2AC99625", []); },
        LBP: () => { return client.encode("95F9E7C7", []); },
        LKR: () => { return client.encode("1C44D48C", []); },
        LRD: () => { return client.encode("DDF85FDC", []); },
        LSL: () => { return client.encode("F5812AD4", []); },
        LYD: () => { return client.encode("319D2E87", []); },
        MAD: () => { return client.encode("24292DD8", []); },
        MDL: () => { return client.encode("E91DCBA1", []); },
        MGA: () => { return client.encode("A41B1312", []); },
        MKD: () => { return client.encode("2742AE6B", []); },
        MMK: () => { return client.encode("8FCF5DB0", []); },
        MNT: () => { return client.encode("720099FE", []); },
        MOP: () => { return client.encode("A5DC384C", []); },
        MRO: () => { return client.encode("71F78C60", []); },
        MUR: () => { return client.encode("0E366C1D", []); },
        MVR: () => { return client.encode("2DCC7F0F", []); },
        MWK: () => { return client.encode("FCDD2BA7", []); },
        MXN: () => { return client.encode("9DC40B06", []); },
        MXV: () => { return client.encode("7A4D6C62", []); },
        MYR: () => { return client.encode("8EFF1074", []); },
        MZN: () => { return client.encode("389F07C6", []); },
        NAD: () => { return client.encode("C06C3053", []); },
        NGN: () => { return client.encode("03D698F2", []); },
        NIO: () => { return client.encode("FA9ECFF4", []); },
        NOK: () => { return client.encode("8D9ECEB9", []); },
        NPR: () => { return client.encode("410EE17F", []); },
        NZD: () => { return client.encode("CA9D1A72", []); },
        OMR: () => { return client.encode("00CF8CCB", []); },
        PAB: () => { return client.encode("4BA4A86D", []); },
        PEN: () => { return client.encode("5B6B57AB", []); },
        PGK: () => { return client.encode("F3F0A794", []); },
        PHP: () => { return client.encode("53F7C367", []); },
        PKR: () => { return client.encode("687B8D9C", []); },
        PLN: () => { return client.encode("ACD84E24", []); },
        PYG: () => { return client.encode("7D55F12E", []); },
        QAR: () => { return client.encode("1EC87442", []); },
        RON: () => { return client.encode("0A9E1100", []); },
        RSD: () => { return client.encode("82EEE09C", []); },
        RUB: () => { return client.encode("976D5E77", []); },
        RWF: () => { return client.encode("D4DADFCE", []); },
        SAR: () => { return client.encode("33C88FF6", []); },
        SBD: () => { return client.encode("5E514EE6", []); },
        SCR: () => { return client.encode("58D5A961", []); },
        SDG: () => { return client.encode("5539A68A", []); },
        SEK: () => { return client.encode("47129083", []); },
        SGD: () => { return client.encode("2E79477F", []); },
        SHP: () => { return client.encode("6B4FC44D", []); },
        SLL: () => { return client.encode("2E797E7B", []); },
        SOS: () => { return client.encode("40B8D988", []); },
        SRD: () => { return client.encode("30E225F8", []); },
        SSP: () => { return client.encode("4AFE83BF", []); },
        STD: () => { return client.encode("97AF4E44", []); },
        SVC: () => { return client.encode("BDFDB6BD", []); },
        SYP: () => { return client.encode("EED00463", []); },
        SZL: () => { return client.encode("AB953C28", []); },
        THB: () => { return client.encode("4AF21616", []); },
        TJS: () => { return client.encode("EC16D3E8", []); },
        TMT: () => { return client.encode("90536D86", []); },
        TND: () => { return client.encode("C0963443", []); },
        TOP: () => { return client.encode("98AA31B6", []); },
        TRY: () => { return client.encode("5AC072D7", []); },
        TTD: () => { return client.encode("ABFBDDAD", []); },
        TWD: () => { return client.encode("B7032BEE", []); },
        TZS: () => { return client.encode("A9AC61F0", []); },
        UAH: () => { return client.encode("87B8D52D", []); },
        UGX: () => { return client.encode("FFD488F9", []); },
        USD: () => { return client.encode("1BF6C21B", []); },
        USN: () => { return client.encode("540619C1", []); },
        UYI: () => { return client.encode("7F531D8A", []); },
        UYU: () => { return client.encode("170B849A", []); },
        UZS: () => { return client.encode("99A4E2D7", []); },
        VEF: () => { return client.encode("7BC8C67E", []); },
        VND: () => { return client.encode("4B2204D0", []); },
        VUV: () => { return client.encode("671D1531", []); },
        WST: () => { return client.encode("D210F581", []); },
        XAF: () => { return client.encode("58E3DD9F", []); },
        XAG: () => { return client.encode("CAAB5D40", []); },
        XAU: () => { return client.encode("770B3AA9", []); },
        XBA: () => { return client.encode("292867E4", []); },
        XBB: () => { return client.encode("6DA826B2", []); },
        XBC: () => { return client.encode("00644CB8", []); },
        XBD: () => { return client.encode("F89605FF", []); },
        XCD: () => { return client.encode("4F28767A", []); },
        XDR: () => { return client.encode("45FD478C", []); },
        XOF: () => { return client.encode("C315D082", []); },
        XPD: () => { return client.encode("E26D1EC2", []); },
        XPF: () => { return client.encode("8706FC6C", []); },
        XPT: () => { return client.encode("CE2BDB8C", []); },
        XSU: () => { return client.encode("54FBD849", []); },
        XTS: () => { return client.encode("4BF9D415", []); },
        XUA: () => { return client.encode("D5C94555", []); },
        XXX: () => { return client.encode("FC8F616E", []); },
        YER: () => { return client.encode("6CBA7FF1", []); },
        ZAR: () => { return client.encode("9DB2A472", []); },
        ZMW: () => { return client.encode("7CBD4CCC", []); },
        ZWL: () => { return client.encode("53B967AB", []); },
        appendNewVersion: (_link: string) => { return client.encode("0FE2D77C", ["address"], _link); },
        compareVersion: (_other: string, _version: [number, number, number]) => {
            if (typeof _other === "string")
                return client.encode("AF9F25A5", ["address"], _other);
            if (typeof _version === "string")
                return client.encode("BB7D8C25", ["uint8[3]"], _version);
        },
        currencies: () => { return client.encode("94AD5396", []); },
        getCurrencyAtIndex: (_index: number) => { return client.encode("D64B4B60", ["uint256"], _index); },
        getCurrencyData: (_key: Buffer) => { return client.encode("9B00ACED", ["bytes3"], _key); },
        getLatest: () => { return client.encode("C36AF460", []); },
        getNumberOfCurrencies: () => { return client.encode("2CACCF69", []); },
        getOwner: () => { return client.encode("893D20E8", []); },
        getPredecessor: () => { return client.encode("E083619A", []); },
        getSuccessor: () => { return client.encode("D9BCCBF7", []); },
        getTargetVersion: (_targetVer: [number, number, number]) => { return client.encode("541063C0", ["uint8[3]"], _targetVer); },
        getVersion: () => { return client.encode("0D8E6E2C", []); },
        getVersionMajor: () => { return client.encode("0815511B", []); },
        getVersionMinor: () => { return client.encode("93AA73D5", []); },
        getVersionPatch: () => { return client.encode("9AC98F94", []); },
        isCurrency: (_alpha3: Buffer) => { return client.encode("2D83CB83", ["bytes3"], _alpha3); },
        setLatest: (_latest: string) => { return client.encode("F363FEC9", ["address"], _latest); },
        setPredecessor: () => { return client.encode("4AABE32C", []); },
        transferOwnership: (_newOwner: string) => { return client.encode("F2FDE38B", ["address"], _newOwner); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        AED: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        AFN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        ALL: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        AMD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        ANG: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        AOA: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        ARS: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        AUD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        AWG: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        AZN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BAM: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BBD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BDT: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BGN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BHD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BIF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BMD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BND: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BOB: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BOV: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BRL: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BSD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BTN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BWP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BYN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        BZD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CAD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CDF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CHE: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CHF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CHW: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CLF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CLP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CNY: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        COP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        COU: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CRC: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CUC: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CUP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CVE: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        CZK: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        DJF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        DKK: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        DOP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        DZD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        EGP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        ERN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        ETB: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        EUR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        EVENT_ID_ISO_CURRENCIES: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        FJD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        FKP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        GBP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        GEL: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        GHS: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        GIP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        GMD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        GNF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        GTQ: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        GYD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        HKD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        HNL: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        HRK: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        HTG: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        HUF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        IDR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        ILS: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        INR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        IQD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        IRR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        ISK: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        JMD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        JOD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        JPY: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        KES: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        KGS: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        KHR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        KMF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        KPW: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        KRW: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        KWD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        KYD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        KZT: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        LAK: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        LBP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        LKR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        LRD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        LSL: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        LYD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MAD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MDL: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MGA: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MKD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MMK: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MNT: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MOP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MRO: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MUR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MVR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MWK: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MXN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MXV: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MYR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        MZN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        NAD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        NGN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        NIO: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        NOK: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        NPR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        NZD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        OMR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        PAB: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        PEN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        PGK: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        PHP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        PKR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        PLN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        PYG: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        QAR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        RON: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        RSD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        RUB: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        RWF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SAR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SBD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SCR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SDG: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SEK: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SGD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SHP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SLL: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SOS: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SRD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SSP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        STD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SVC: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SYP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        SZL: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        THB: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        TJS: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        TMT: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        TND: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        TOP: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        TRY: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        TTD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        TWD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        TZS: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        UAH: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        UGX: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        USD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        USN: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        UYI: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        UYU: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        UZS: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        VEF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        VND: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        VUV: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        WST: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XAF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XAG: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XAU: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XBA: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XBB: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XBC: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XBD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XCD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XDR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XOF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XPD: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XPF: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XPT: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XSU: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XTS: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XUA: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        XXX: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        YER: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        ZAR: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        ZMW: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        ZWL: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        appendNewVersion: (): {
            error: number;
        } => {
            const [error] = client.decode(data, ["uint256"]);
            return { error: error };
        },
        compareVersion: (): {
            result: number;
        } => {
            const [result] = client.decode(data, ["int256"]);
            return { result: result };
        },
        currencies: (): {
            alpha3: Buffer;
            m49: Buffer;
            name: string;
            exists: boolean;
        } => {
            const [alpha3, m49, name, exists] = client.decode(data, ["bytes3", "bytes3", "string", "bool"]);
            return { alpha3: alpha3, m49: m49, name: name, exists: exists };
        },
        getCurrencyAtIndex: (): [Buffer] => { return client.decode(data, ["bytes3"]); },
        getCurrencyData: (): {
            alpha3: Buffer;
            m49: Buffer;
            name: string;
        } => {
            const [alpha3, m49, name] = client.decode(data, ["bytes3", "bytes3", "string"]);
            return { alpha3: alpha3, m49: m49, name: name };
        },
        getLatest: (): [string] => { return client.decode(data, ["address"]); },
        getNumberOfCurrencies: (): {
            size: number;
        } => {
            const [size] = client.decode(data, ["uint256"]);
            return { size: size };
        },
        getOwner: (): [string] => { return client.decode(data, ["address"]); },
        getPredecessor: (): [string] => { return client.decode(data, ["address"]); },
        getSuccessor: (): [string] => { return client.decode(data, ["address"]); },
        getTargetVersion: (): {
            targetAddr: string;
        } => {
            const [targetAddr] = client.decode(data, ["address"]);
            return { targetAddr: targetAddr };
        },
        getVersion: (): [[number, number, number]] => { return client.decode(data, ["uint8[3]"]); },
        getVersionMajor: (): [number] => { return client.decode(data, ["uint8"]); },
        getVersionMinor: (): [number] => { return client.decode(data, ["uint8"]); },
        getVersionPatch: (): [number] => { return client.decode(data, ["uint8"]); },
        isCurrency: (): [boolean] => { return client.decode(data, ["bool"]); },
        setLatest: (): {
            success: boolean;
        } => {
            const [success] = client.decode(data, ["bool"]);
            return { success: success };
        },
        setPredecessor: (): {
            error: number;
        } => {
            const [error] = client.decode(data, ["uint256"]);
            return { error: error };
        },
        transferOwnership: (): void => { return; }
    }; };
}